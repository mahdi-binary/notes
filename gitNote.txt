## Git Notes by Sayed Mohammad Mahdi Sadrnezhaad
## Email: smmsadr@gmail.com

# References :  
##	Git Real

DVCS = Distributed version control system 

Git work flow:		- Starts as untracked
			- Add file to staging area
			- Commit changes

git help											help any way!			
===========================

local repo
******************************************************************

git init											initialise a git folder
===========================

git status											to see unstaged change since last commit.
===========================
git checkout — {files}										to get back to committed file and ignore the changes.
.git/info/exclude										the list of not repo folders or files
.gitignore	put logs/*.log									ignore servers repository logs 
											
git add {files/—all}										add changes to stage
===========================
git reset HEAD {files}										unstaged a staged file	HEAD refers to last commit we made
git rm <filename>										remove file from repo

git commit -m “{Metadata of what you done.}”							commit changes to repo
===========================
git commit -a -m “{modify comment}” {file name}							skip staging and commit
git reset —soft HEAD^										reset last commit and puts it in staged state
git commit —amend -m “{New comment}”								add a file to previous commit and overwrite comment
git reset —hard HEAD^							    			reset last commit
git reset —hard HEAD^^										back to two last commit


git log												show the last commit and comments
===========================
git config —global color.ui true								color the hash to find where is commit
git log —pretty=oneline
git log —pretty=format:”%h %ad- %s [%an]”
	%ad -> author date
	%an -> author name
	%h  -> SHA hash
	%s  -> subject
	%d  -> ref names
git log —online -p										what is changed in each commit
git log —online —graph
git log —until=1.minute.ago
git log —since=1.day.ago		minute/day/week/month or <date>
git rm —cached development.log									stop following this log file

git diff 											show edit files
===========================
git diff											unstaged edits
git diff HEAD											same as git diff
git diff —staged									 	staged files
git diff <SHA1>..<SHA2>
git log —online
git log master <branch>
git diff —until=1.minute.ago —since=1.day.ago
git mylog

git blame
===========================
git blame <filename> —date short

git tag												to find the tags, usually for versioning
===========================
git checkout <some tag>										to checkout some specific changes
git tag -a <version> -m “comment”								to make a tag point
git tag												to show tags
git push —tags											tag on the commits

Online repo
******************************************************************
Host:		- GitHub
		- BitBucket
Self Managed:	- Gitosis
		- Gitorious
	
git remote add {name} {URL}									adding a remote to you repo
===========================
	add	 => new remote									
	{name} => name for this remote
git remote -v											show remote repositories
git remove {name}										remove a repo from service
git config —global user.name “Name”
git config —global user.email “mail@mail”
git config —global core.edit emacs
git config —global merge.tools opendiff
git config user.mail “mail2@mail”								config email for current repo
git config —list
git config user.email

git config —global alias.<something> {you command} -> git <something>

git push -u {name} {branch}									pushing to remote
===========================
	-u	=> set default name & branch 
	{name} 	=> name of the remote
	{branch}=> name for local branch
git pull

git rebase
===========================
git fetch 	=> remote -> origin/master							download changes but not merge to master 
git rebase	=> 1. master -> tempMaster
		=> 2. origin/master -> master
		=> 3. tempMaster -> master


git clone {URL}	{Optional folder name}								create a folder with remote repository files
===========================
What git does: 		- Downloads the entire repository into a new git-real directory.
			- Adds the ‘origin’ remote, pointing it to the clone URL.
			- Checks out initial branch  (likely master).

heroku remote
******************************************************************
heroku creat											It adds itself to remote repo list
git push heroku {master}

git diff HEAD
git add octofamily/octodog.txt
git diff --staged
git checkout — <target>
git branch cleanup
git rm ‘*.txt’
git merge clean_up
git branch -d clean_up
git push heroku-staging staging:master								heroku has only master branch, so you only could push to master

stashing
******************************************************************
git stash  				git stash save
git stash apply				git stash apply stash@{0}
git stash list
git stash apply stash@{1}
git stash drop				git stash drop stash@{0}
git stash pop				git stash apply & git stash drop			apply the stash and remove the stash from too of list if there is no conflict
git stash save --keep-index									stash the unstaged files only							
git stash save —include-untracked								stash untracked files (new files)
git list —state
git stash show Stash@{1}
git stash show —patch
git stash save “Comment”
git stash branch BranchName stash@{1}
git stash clear

stashing conflict
===========================


branching
******************************************************************
git branch <branchName>										create a branch
git branch											show list of branches
git checkout <branchName>									change to other branch
git checkout -b <branchName>									create and change to the branch
git merge <branchName>										merge changes from a branch to other
git branch -d <branchName>									delete the branch
git branch -D <branch>										delete the branch anyway
git push {name} {branch}									setup a new branch in remote based on local branch 
git branch -r 											show all remote branches
git remote show <name>
git push <name> :<branch>									delete the branch in remote
git remote prune <name>

git rebase
===========================
git checkout <branch> && git rebase master && git checkout master && git merge admin
git rebase master										if you are in <branch> it moving commits to point which last master commit is done.
git rebase -i HEAD~3	pick	do it again							changing previews commits after what you specify
			reword	edit massage
			edit
			squash
git rebase —continue										rebase after solving conflict issue
git rebase —skip										ignore the patch
git rebase —abort										go back to before rebase

collabration
******************************************************************
git pull && git push										different version of different file goes to remote caused error
	=>git pull = git fetch && git merge origin/master
git pull -> “merge conflict” && edit <conflicted file> && git commit -a && git push		different version of same file 

history & configuration
******************************************************************


/etc/sudoers: 

(+) scout ALL=(ALL) NOPASSWD: /sbin/iptables-save