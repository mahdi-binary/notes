## Git Notes by Sayed Mohammad Mahdi Sadrnezhaad
## Email: smmsadr@gmail.com

# References :  
##	Git Real

DVCS = Distributed version control system 

Git work flow:		- Starts as untracked
			- Add file to staging area
			- Commit changes

git help											help any way!			
===========================

local repo
******************************************************************

git init											initialise a git folder
===========================

git status											To see unstaged change since last commit.
===========================
git checkout — {files}										To get back to committed file and ignore the changes.

git add {files/—all}										add changes to stage
===========================
git reset HEAD {files}										unstaged a staged file	HEAD refers to last commit we made


git commit -m “{Metadata of what you done.}”							commit changes to repo
===========================
git commit -a -m “{modify comment}” {file name}							skip staging and commit
git reset —soft HEAD^										reset last commit and puts it in staged state
git commit —amend -m “{New comment}”								add a file to preview commit and overwrite comment
git reset —hard HEAD^							    			reset last commit
git reset —hard HEAD^^										back to two last commit


git log												show the last commit and comments
===========================

git diff 											show edit files
===========================
git diff											unstaged edits
git diff —staged									 	staged files

git tag												to find the tags, usually for versioning
===========================
git checkout <some tag>										to checkout some specific changes
git tag -a <version> -m “comment”								to make a tag point
git tag												to show tags
git push —tags											tag on the commits

Online repo
******************************************************************
Host:		- GitHub
		- BitBucket
Self Managed:	- Gitosis
		- Gitorious
	
git remote add {name} {URL}									adding a remote to you repo
===========================
	add	 => new remote									
	{name} => name for this remote
git remote -v											show remote repositories
git remove {name}										remove a repo from service

git push -u {name} {branch}									pushing to remote
===========================
	-u	=> set default name & branch 
	{name} 	=> name of the remote
	{branch}=> name for local branch
git pull

git rebase
===========================
git fetch 	=> remote -> origin/master							download changes but not merge to master 
git rebase	=> 1. master -> tempMaster
		=> 2. origin/master -> master
		=> 3. tempMaster -> master

git clone {URL}	{Optional folder name}								create a folder with remote repository files
===========================
What git does: 		- Downloads the entire repository into a new git-real directory.
			- Adds the ‘origin’ remote, pointing it to the clone URL.
			- Checks out initial branch  (likely master).

heroku remote
******************************************************************
heroku creat											It adds itself to remote repo list
git push heroku {master}

git diff HEAD
git add octofamily/octodog.txt
git diff --staged
git checkout — <target>
git branch cleanup
git rm ‘*.txt’
git merge clean_up
git branch -d clean_up
git push heroku-staging staging:master								heroku has only master branch, so you only could push to master

branching
******************************************************************
git branch <branchName>										create a branch
git branch											show list of branches
git checkout <branchName>									change to other branch
git checkout -b <branchName>									create and change to the branch
git merge <branchName>										merge changes from a branch to other
git branch -d <branchName>									delete the branch
git branch -D <branch>										delete the branch anyway
git push {name} {branch}									setup a new branch in remote based on local branch 
git branch -r 											show all remote branches
git remote show <name>
git push <name> :<branch>									delete the branch in remote
git remote prune <name>

collabration
******************************************************************
git pull && git push										different version of different file goes to remote caused error
	=>git pull = git fetch && git merge origin/master
git pull -> “merge conflict” && edit <conflicted file> && git commit -a && git push		different version of same file 




/etc/sudoers: 

(+) scout ALL=(ALL) NOPASSWD: /sbin/iptables-save