Sequential
*****************************************
print <variable1>,<variable2>,...
x = raw_input('<string>?')

Condotional
*****************************************
if <condition>:
	<do 1>
elif <condition>:
	<do 2>
else:
	<do 3>

try:
	<do 1>
except:
	<do 2>
	quit()

== >= <= != is “is not”

Irritational				# loop
*****************************************
for x in list_t:			# Definite loop
	<do somthing>

func(x) for x in list_t if condition(x)

while <condition>:			# Indefinite loop until the condition is correct it will continue
	<do somthing>
	continue
	break				# stop the loop


Type
*****************************************
type(123)	->> <type'int'>
* Integer
* Float
* String
* Boolean 	->> True False
None


int(<float>)
float(<int>)
int(<str>)

function
*****************************************
* Built-in functions
max(<list>)
min(<list>)

* Define functions
def func(pr1,pr2,pr3):				# define the function func() 
	<do something>
	return <something>

func()					# running func()

list
*****************************************
mt_list = [ ] 				#empty list
list1 = [1, 2, 3]
list2 = ['hello', 'welcome']
list3 = [[], [1, 2, 3], ['Yes', 'No']]
len(listX) 				#length of listX

## String is a kind of list 
list3[3]                    		# third element of list3
list3[-1]				# last element of list3
list2[2]='bye'				# change 2nd element of list2 to 'bye'
list2.append('hi')			# add a new element to the list
list3.pop() or (3)			# remove last of 3rd element of list3
list2.remove(x)				# remove x in the list2
x in list3				# is there x in list3 (Boolean)
list3.index(x)				# where is x in list3

new_list= list(oldList) 		# copy the list to new list

greet.lower()
greet.upper()
greet.replace(str1,str2)
greet.find(‘a’)
greet.lstrip()
greet.rstrip()
greet.strip()
greet.startwith(str1)

Dictionary				# mapping 	key -> values
*****************************************
d = {1: 2, 3: 4, 6: 727, <key>: <value>}
d[1] = 37
d2 = {‘a’ : 47}
d3 = {‘ab’ : [1,2,4,8]}
d2[‘a’]  -> 47
d3.items() -> <key>,<value>		#tip: <key> should be unhashable value.

Mouse input
*****************************************
import simplegui

def mouse_handler(position):
    …

frame = simplegui.create_frame('Testing', 100, 100)
frame.set_mouseclick_handler(mouse_handler)
frame.start()

Images
*****************************************
im = simplegui.image(<URL>)
canvas.draw_image(im, src_center, src_size, dst_center, dst_size)		# rectangle in image: src_center, src_size	# rectangle in canvas: dst_center, dst_size






Event Driven Programming Program structure
*****************************************
import simplegui
import math
import random

# intialize globals
variableName = Value									

# helper function
def func(x, y):
    return <functionOnXY(x, y)

# define event handler
def eventHandler(t):
    global variableName
    <what you want happen>

# create frame
frame = simplegui.create_frame("<Title>", <WIDTH>, <HEIGHT>)
frame.set_canvas_background("<colour>")

# register event handler
frame.set_<func>(<eventHandler>)

# start frame & timer
frame.start()
